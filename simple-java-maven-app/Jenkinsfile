pipeline {
  agent any

  environment {
    AWS_REGION = 'us-east-1'
    ECR_REPO = '123456789012.dkr.ecr.us-east-1.amazonaws.com/myapp'
    IMAGE_TAG = "v${BUILD_NUMBER}"
  }

  stages {
    stage('Checkout') {
      steps {
        git url: 'https://github.com/youruser/myapp.git'
      }
    }

    stage('Build with Maven') {
      steps {
        sh 'mvn clean package'
      }
    }

    stage('Build Docker Image') {
      steps {
        script {
          docker.build("${ECR_REPO}:${IMAGE_TAG}")
        }
      }
    }

    stage('Login to ECR') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'aws-creds', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
          sh '''
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region ${AWS_REGION}
            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REPO}
          '''
        }
      }
    }

    stage('Push Docker Image') {
      steps {
        sh """
          docker push ${ECR_REPO}:${IMAGE_TAG}
        """
      }
    }

    stage('Deploy on EC2') {
      steps {
        sshagent(credentials: ['deploy-ec2']) {
          sh """
            ssh -o StrictHostKeyChecking=no ubuntu@<EC2_DEPLOY_PUBLIC_IP> '
              aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REPO}
              docker pull ${ECR_REPO}:${IMAGE_TAG}
              docker stop myapp || true
              docker rm myapp || true
              docker run -d --name myapp -p 3080:8080 ${ECR_REPO}:${IMAGE_TAG}
            '
          """
        }
      }
    }
  }
}

